{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":6604065,"sourceType":"datasetVersion","datasetId":3810166}],"dockerImageVersionId":30664,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport os","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"file_names = os.listdir(\"/kaggle/input/war-tech-v2-0-by-gontech/war_TCHBYGON/obshaya_papk\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"os.mkdir(\"datasets\")\nos.mkdir(\"datasets/train\")\nos.mkdir(\"datasets/val\")\nos.mkdir(\"datasets/test\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"os.mkdir(\"datasets/train/images\")\nos.mkdir(\"datasets/train/labels\")\nos.mkdir(\"datasets/test/images\")\nos.mkdir(\"datasets/test/labels\")\nos.mkdir(\"datasets/val/images\")\nos.mkdir(\"datasets/val/labels\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\ntrain, test = train_test_split(file_names, test_size=0.1)\ntrain, Val = train_test_split(train, test_size=0.15)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import shutil","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"orpath = \"/kaggle/input/war-tech-v2-0-by-gontech/war_TCHBYGON/obshaya_papk\"\nfor t in train:\n    shutil.copyfile(os.path.join(orpath, t), os.path.join(\"datasets/train/images\", t))","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for t in test:\n    shutil.copyfile(os.path.join(orpath, t), os.path.join(\"datasets/test/images\", t))","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for t in Val:\n    shutil.copyfile(os.path.join(orpath, t), os.path.join(\"datasets/val/images\", t))","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y = pd.read_csv(\"/kaggle/input/war-tech-v2-0-by-gontech/war_TCHBYGON/war_tech_gont-export.csv\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y[\"image\"].tail()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn import preprocessing \n  \n# label_encoder object knows  \n# how to understand word labels. \nlabel_encoder = preprocessing.LabelEncoder() \n  \n# Encode labels in column 'species'. \ny['label']= label_encoder.fit_transform(y['label']) ","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"le_name_mapping = dict(zip(label_encoder.classes_, label_encoder.transform(label_encoder.classes_)))\nprint(le_name_mapping)\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import cv2\n\ndef data2form(filename, xmin, xmax, ymin, ymax, label):\n    try:\n        \n        img = cv2.imread(f\"/kaggle/input/war-tech-v2-0-by-gontech/war_TCHBYGON/obshaya_papk/{filename}\")\n    \n        height = img.shape[0]\n        width = img.shape[1]\n        \n        xc = (xmin + xmax) / (2 * width)\n        yc = (ymin+ymax) / (2*height)        \n        w = (xmax-xmin )/width\n        h = (ymax-ymin)/height \n        \n        return f\"{label} {xc} {yc} {w} {h}\"\n    except: \n        pass","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import tqdm\ntry:\n    for row in tqdm.tqdm(y.loc):\n        row[\"image\"]=row[\"image\"].replace('%20', ' ')\n        data = data2form(row[\"image\"], row[\"xmin\"] , row[\"xmax\"], row[\"ymin\"], row[\"ymax\"] , row[\"label\"])\n        folder = \"datasets/train\" if row[\"image\"] in train else \"datasets/val\" if row[\"image\"] in Val else \"datasets/test\"\n        with open(f'{folder}/labels/{row[\"image\"][:-4]}.txt', 'a+') as file:\n            file.write(data) if data else \"\"\nexcept:\n    pass","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"config_str = \"\"\"\npath: /\ntrain: /kaggle/working/datasets/train\nval: /kaggle/working/datasets/val\ntest: /kaggle/working/datasets/test\nnames:\n  0:artilleriya\n  1:bmp\n  2:bpla\n  3:bronemashina\n  4:btr\n  5:pehota\n  6:rszo\n  7:tank\n\"\"\"\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import yaml\n\n# Parse the YAML string\nconfig_data = yaml.safe_load(config_str)\n# Specify the file path where you want to save the YAML file\nfile_path = 'dataset.yaml'\n# Write the YAML data to the file\nwith open(file_path, 'w') as file:\n    yaml.dump(config_data, file, default_flow_style=False)\nprint(f\"YAML file saved to {file_path}\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pip install ultralytics","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!yolo settings datasets_dir='/kaggle/working/datasets' wandb=False","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from ultralytics import YOLO\n# Load a model\nmodel = YOLO('yolov8n.yaml')  # build a new model from YAML\nmodel = YOLO('yolov8n.pt')  # load a pretrained model (recommended for training)\nmodel = YOLO('yolov8n.yaml').load('yolov8n.pt')  # build from YAML and transfer weights\n# Train the model\nresults = model.train(data='dataset.yaml', epochs=1, imgsz=640)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}